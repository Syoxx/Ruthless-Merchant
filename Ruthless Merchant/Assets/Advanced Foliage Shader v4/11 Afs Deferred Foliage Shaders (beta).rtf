{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16300\viewh14980\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ri-2320\sl264\slmult1\pardirnatural

\f0\b\fs48 \cf0 Deferred Foliage Shaders 
\b0 (beta)
\b \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ri-2320\pardirnatural

\b0\fs36 \cf0 AFS deferred foliage shaders are just a first test to bring some kind of translucent lighting to deferred lighting without hacking the whole rendering pipeline.\
\

\b The problem
\b0 \

\fs24 \
Unity\'92s deferred lighting pipeline does not support translucency.\
So without hacking it we will have to use a bunch of tricks to get "some kind" of translucency into our final rendering.\
\
Translucency depends on the light\'92s direction and intensity. As we could pass in both values for one single main light = sun by script we might approximate it in the vertex shader.\
However this will fail if our scene was lit by more than one main light.\
So let\'92s assume you have one main directional light (sun) and use deferred for what reason soever.\
Then making all your foliage to be rendered in deferred would make sense \'96 as it will most likely speed up the lighting calculation, especially if you have a lot of overdraw, which \'96 in case of foliage \'96 usually is the case.\
\
\

\b\fs36 The solution
\fs24 \

\b0 \
All we can do is either:\
- add translucency on top of the albedo.\
- or add translucency as emission.\

\fs12 \

\fs24 Each of these possibilities has its own drawbacks:\
- Albedo: Translucency would be shaded by real time shadows (nice) but only if we use single sided geometry which causes a lot of other problems.\
- Emission: Adding translucency to the emission would be the correct way but unfortunately emission is not being effected by real time shadows. So translucent parts will not be shaded properly.\
\
The pre beta deferred foliage shaders let you test both:\
- double sided geometry and correct but unshaded translucency.\
- single sided geometry and wrong but shaded translucency.\
\
Personally i would vote for \'84single sided geometry and wrong translucency\'93 even if this option has some more drawbacks as described below: It looks ok even with point and spot lights and should be pretty fast to render.\
In the end you will have to test both shaders under your lighting conditions and see if one of these fits your needs.\
\

\b\fs28 AfsFoliageShader Deferred v4\

\b0\fs12 \

\fs24 This shader needs double sided geometry just like the "regular" foliage shader.\
Translucency is approximated within the vertex shader and needs the sun\'92s position and intensity to be passed by script.\

\fs12 \

\b\fs24 Pros
\b0 \
- Diffuse and specular lighting just works like expected.\

\fs12 \

\b\fs24 Cons
\b0 \
- Translucency is output to Emission which makes it not being effected by real time shadows.\
- Translucency will only be calculated for one direction light.\
\
\

\b\fs28 AfsFoliageShader Deferred SingleSided v4\

\b0\fs12 \

\fs24 This shader needs single sided geometry.\
Translucency is approximated within the vertex shader and needs the sun\'92s position and intensity to be passed by script.\
But in fact\'97as the shader does not skip back faces\'97you will always get "some kind of translucency" as the shader lightens back faces just like front faces.\

\fs12 \

\b\fs24 Pros\

\b0 - Single sided geometry has a lower vertex count of course\
- It might give us some kind of translucency even from spot or point lights.\

\fs12 \

\b\fs24 Cons\

\b0 - Using single sided geometry gives us wrong diffuse lighting if we look at the "back faces".\
- Using single sided geometry we can not calculate correct specular lighting by default.\
- Using single sided geometry it is even difficult to calculate correct translucency.\
- Single sided geometry will most likely corrupt GI\
}